#compdef dotfiles

# Global variables; setup the first time _dotfiles is called.
# For $_dotfiles_commands[] generation, see the very end of this file.
typeset -ga _dotfiles_commands _dotfiles_aliases
typeset -gA _dotfiles_aliasmap
typeset -ga _dotfiles_packages

_dotfiles_aliasmap=(
  list      list
  update    update
  install   install
  uninstall uninstall
)

# --- Sub-command functions ---
# These *must* be called _dotfiles-*(); The description generation relies on
# them being names that way. *No* other functions may match that pattern.
# Other utility functions should be named __dotfiles-*() (see below).
#
# Another thing, the description generation needs, is handling of
# $dotfiles_describe: If that parameter is non-empty, the sub-command function
# should only print a description of the sub-command it handles and return
# immidiately after doing so.
#
# To add support for a new sub-command, you only have to add a new
# _dotfiles-<foo>() function below (preferably alphabetically sorted), that
# behaves like described above; and add a alias->command pair in the
# _dotfiles_aliasmap associative array above (if the comand in fact has an
# alias). The rest should just work[tm].

function _dotfiles-update()
{
    [[ -n ${dotfiles_describe} ]] && print "Update dotfiles" && return
}

function _dotfiles-list()
{
    [[ -n ${dotfiles_describe} ]] && print "List dotfiles" && return
}

function _dotfiles-install()
{
    [[ -n ${dotfiles_describe} ]] && print "Install dotfiles" && return
}

function _dotfiles-uninstall()
{
    [[ -n ${dotfiles_describe} ]] && print "Uninstall dotfiles" && return
}

# And here is the actual _dotfiles(), that puts it all together:
function _dotfiles() {
    local curcontext="${curcontext}"
    local mode state ret
    local -x dotfilescommand
    unset dotfiles_describe

    local -a args=(
      {-h,--help}'[print help]'
      {-d,--debug}'[debug mode]'
      {-D,--devel}'[devel mode]'
      {-v,--verbose}'[verbose mode]'
      {-q,--quiet}'[quiet mode]'
      '*:: :->subcommand_or_options'
    )
    _arguments -C -s -w ${args} && return

    if [[ ${state} == "subcommand_or_options" ]]; then
        if (( CURRENT == 1 )) ; then
            zstyle -s ":completion:${curcontext}:subcommands" mode mode || mode='commands'
            if [[ ${mode} == 'commands' ]]; then
                _describe -t subcommands 'dotfiles commands' _dotfiles_commands
            elif [[ ${mode} == 'aliases' ]]; then
                _describe -t subcommands 'dotfiles aliases' _dotfiles_aliases
            else
                _describe -t subcommands 'dotfiles commands and aliases' _dotfiles_commands -- _dotfiles_aliases
            fi
        else
            if (( ${+functions[dotfiles]} == 0 )); then
                _message '`dotfiles'\'' not found in $path; sub-cmd completions disabled.'
                return 0
            fi
            dotfilescommand="${words[1]}"
            if [[ -n ${_dotfiles_aliasmap[$dotfilescommand]} ]] ; then
                dotfilescommand="${_dotfiles_aliasmap[$dotfilescommand]}"
            fi
            if ! (( ${+functions[_dotfiles-$dotfilescommand]} )); then
              local low high
              low=$_dotfiles_commands[(i)$dotfilescommand*]
              high=$_dotfiles_commands[(I)$dotfilescommand*]
              if (( low == high )); then
                dotfilescommand=${_dotfiles_commands[low]%%:*}
              elif (( low < high )); then
                _message -e "Ambiguous command $dotfilescommand"
              else
                _message -e "Subcommand $dotfilescommand not known"
              fi
            fi
            curcontext="${curcontext%:*:*}:dotfiles-${dotfilescommand}:"
            _call_function ret _dotfiles-${dotfilescommand}
        fi
    fi
}

# description generation follows; only done on 1st _dotfiles call.
local f desc
local -A rev
local -x dotfiles_describe
dotfiles_describe='yes, please'
for f in ${(k)_dotfiles_aliasmap} ; do
    rev+=( ${_dotfiles_aliasmap[$f]} $f )
done
for f in ${(M)${(k)functions}:#_dotfiles-*} ; do
    desc="$($f)"
    _dotfiles_commands+=( "${f#_dotfiles-}${desc:+:$desc}" )
    [[ -n ${rev[${f#_dotfiles-}]} ]] && _dotfiles_aliases+=( "${rev[${f#_dotfiles-}]}${desc:+:$desc}" )
done
unset desc f rev dotfiles_describe

_dotfiles

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
